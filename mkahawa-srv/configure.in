AC_INIT(configure.in)

dnl Product Release Number
MKAHAWA_MAJOR_VERSION=0
MKAHAWA_MINOR_VERSION=0
MKAHAWA_PATCH_LEVEL=4

dnl Combined Product Release Number
VERSION=$MKAHAWA_MAJOR_VERSION.$MKAHAWA_MINOR_VERSION.$MKAHAWA_PATCH_LEVEL

dnl Initialize automake
AM_INIT_AUTOMAKE(mkahawa,$VERSION)

dnl Report what was found
AC_MSG_CHECKING(major version)
AC_MSG_RESULT($MKAHAWA_MAJOR_VERSION)
AC_MSG_CHECKING(minor version)
AC_MSG_RESULT($MKAHAWA_MINOR_VERSION)
AC_MSG_CHECKING(patchlevel)
AC_MSG_RESULT($MKAHAWA_PATCH_LEVEL)

AC_SUBST(MKAHAWA_MAJOR_VERSION)
AC_SUBST(MKAHAWA_MINOR_VERSION)
AC_SUBST(MKAHAWA_PATCH_LEVEL)

dnl Checks for programs.
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_INTLTOOL

AC_LANG_CPLUSPLUS

AC_PATH_X
AC_PATH_XTRA

AC_MINGW32()
AC_ARG_WITH(mingw32,[  --with-mingw32[=DIR]    MingW32 installation location])

if test "x$MINGW32" = "xyes" ; then
X_CFLAGS=""
X_LIBS=""
fi

if test "x$MINGW32" = "xyes" ; then
  AC_DEFINE(WIN32)
  LIBS="${LIBS} -lcomctl32 -lwsock32 -lwinspool -lmpr"
  LDFLAGS="${LDFLAGS} -mwindows -e _mainCRTStartup"
  if test "x$with_mingw32" != "x" ; then
    CPPFLAGS="${CPPFLAGS} -I$with_mingw32/include"
    LIBS="${LIBS} -L$with_mingw32/lib"
  fi
  X_BASE_LIBS=""
else
  X_BASE_LIBS="-lX11"
fi
AC_SUBST(X_BASE_LIBS)
AC_EXEEXT

case "$host_os" in
  darwin*)
    AC_DEFINE(MACOSX)
  ;;
esac

AM_GNU_GETTEXT([external])
  
dnl Checks for header files.
AC_CHECK_LIB(FOX-1.6,fxfindfox,,AC_MSG_ERROR([please install fox 1.6]))
AC_CHECK_HEADER(fox-1.6/fx.h,,AC_MSG_ERROR([please install fox 1.6 headers]))
AC_CHECK_LIB(ccls,CCL_init,,AC_MSG_ERROR([please install libccls]))
AC_CHECK_HEADER(ccls.h,,AC_MSG_ERROR([please install libccls headers]))
  
dnl Done.
AC_OUTPUT([ po/Makefile.in m4/Makefile
Makefile
src/Makefile 
])
